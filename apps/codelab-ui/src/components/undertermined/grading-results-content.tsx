"use client"

import { useState } from "react"
import {
  ArrowLeft,
  Download,
  Printer,
  User,
  Mail,
  Calendar,
  FileText,
  Award,
  CheckCircle,
  XCircle,
  AlertCircle,
  BarChart3,
  Lightbulb,
  MessageSquare,
  Star,
  Clock,
  Code,
  Layers,
} from "lucide-react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Separator } from "@/components/ui/separator"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"

interface TestCase {
  id: string
  name: string
  input: string
  expectedOutput: string
  actualOutput: string
  status: "PASS" | "FAIL" | "PARTIAL"
  score: number
  maxScore: number
}

interface Exercise {
  id: string
  title: string
  description: string
  weight: number
  score: number
  maxScore: number
  testCases: TestCase[]
  feedback: {
    autoGenerated: string
    tutorFeedback: string
    improvements: string[]
  }
}

interface GradingResultsContentProps {
  data: {
    student: {
      name: string
      email: string
      submissionId: string
      submissionDate: string
    }
    session: {
      id: string
      title: string
      courseCode: string
      instructor: string
    }
    overallScore: number
    maxScore: number
    exercises: Exercise[]
    breakdown: {
      testCases: { score: number; total: number; percentage: number }
      timeEfficiency: { score: number; total: number; percentage: number }
      codeQuality: { score: number; total: number; percentage: number }
    }
    feedback: {
      overallComment: string
      strengths: string[]
      areasForImprovement: string[]
    }
    submittedAt: string
  }
  userEmail: string
}

export function GradingResultsContent({ data, userEmail }: GradingResultsContentProps) {
  const [selectedExerciseId, setSelectedExerciseId] = useState<string>(data.exercises[0]?.id || "")

  const selectedExercise = data.exercises.find((ex) => ex.id === selectedExerciseId) || data.exercises[0]

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "PASS":
        return <CheckCircle className="h-4 w-4 text-green-500" />
      case "FAIL":
        return <XCircle className="h-4 w-4 text-red-500" />
      case "PARTIAL":
        return <AlertCircle className="h-4 w-4 text-yellow-500" />
      default:
        return null
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "PASS":
        return "text-green-700 bg-green-50 border-green-200"
      case "FAIL":
        return "text-red-700 bg-red-50 border-red-200"
      case "PARTIAL":
        return "text-yellow-700 bg-yellow-50 border-yellow-200"
      default:
        return "text-gray-700 bg-gray-50 border-gray-200"
    }
  }

  const getScoreColor = (score: number, maxScore: number) => {
    const percentage = (score / maxScore) * 100
    if (percentage >= 90) return "text-green-600"
    if (percentage >= 80) return "text-blue-600"
    if (percentage >= 70) return "text-yellow-600"
    return "text-red-600"
  }

  const calculatePassRate = (testCases: TestCase[]) => {
    const passed = testCases.filter((tc) => tc.status === "PASS").length
    return (passed / testCases.length) * 100
  }

  const initial = userEmail ? userEmail.charAt(0).toUpperCase() : "S"

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 sticky top-0 z-10">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-4">
              <Link href={`/student_dashboard/session/${data.session.id}?email=${encodeURIComponent(userEmail)}`}>
                <Button variant="ghost" size="icon" className="rounded-full">
                  <ArrowLeft className="h-5 w-5" />
                </Button>
              </Link>

              <div>
                <h1 className="text-xl font-semibold text-gray-900">Submission Feedback Report</h1>
                <p className="text-sm text-gray-600">
                  {data.session.courseCode} â€¢ {data.session.title}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-4">
              <div className="flex gap-2">
                <Button variant="outline" size="sm">
                  <Download className="h-4 w-4 mr-2" />
                  Download PDF
                </Button>
                <Button variant="outline" size="sm">
                  <Printer className="h-4 w-4 mr-2" />
                  Print Report
                </Button>
              </div>

              <div className="flex items-center gap-3">
                <div className="text-right hidden sm:block">
                  <p className="text-sm font-medium">{userEmail}</p>
                  <p className="text-xs text-gray-500">Student</p>
                </div>
                <Avatar className="h-8 w-8">
                  <AvatarFallback className="bg-teal-600 text-white">{initial}</AvatarFallback>
                </Avatar>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        {/* Grade Summary Card */}
        <Card className="mb-6 bg-gradient-to-r from-teal-800 to-emerald-700 text-white">
          <CardContent className="pt-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <Award className="h-5 w-5 text-yellow-300" />
                  <h2 className="text-lg font-semibold">Overall Grade</h2>
                </div>
                <div className="flex items-baseline gap-2">
                  <span className="text-4xl font-bold">{data.overallScore}</span>
                  <span className="text-xl">/ {data.maxScore}</span>
                </div>
                <Progress value={(data.overallScore / data.maxScore) * 100} className="h-2 bg-white/20" />
                <p className="text-sm text-white/80">Submitted on {data.student.submissionDate}</p>
              </div>

              <div className="space-y-3">
                <h3 className="text-sm font-medium flex items-center gap-2">
                  <BarChart3 className="h-4 w-4" />
                  Performance Breakdown
                </h3>
                <div>
                  <div className="flex justify-between text-sm mb-1">
                    <span>Test Cases</span>
                    <span>{data.breakdown.testCases.percentage}%</span>
                  </div>
                  <Progress value={data.breakdown.testCases.percentage} className="h-1.5 bg-white/20" />
                </div>
                <div>
                  <div className="flex justify-between text-sm mb-1">
                    <span>Time Efficiency</span>
                    <span>{data.breakdown.timeEfficiency.percentage}%</span>
                  </div>
                  <Progress value={data.breakdown.timeEfficiency.percentage} className="h-1.5 bg-white/20" />
                </div>
                <div>
                  <div className="flex justify-between text-sm mb-1">
                    <span>Code Quality</span>
                    <span>{data.breakdown.codeQuality.percentage}%</span>
                  </div>
                  <Progress value={data.breakdown.codeQuality.percentage} className="h-1.5 bg-white/20" />
                </div>
              </div>

              <div className="space-y-2">
                <h3 className="text-sm font-medium flex items-center gap-2">
                  <Layers className="h-4 w-4" />
                  Exercise Summary
                </h3>
                <div className="space-y-2">
                  {data.exercises.map((exercise) => (
                    <div key={exercise.id} className="flex justify-between items-center text-sm">
                      <div className="flex items-center gap-1.5 truncate pr-2">
                        <div
                          className={`h-2 w-2 rounded-full ${getScoreColor(exercise.score, exercise.maxScore) === "text-green-600" ? "bg-green-300" : getScoreColor(exercise.score, exercise.maxScore) === "text-blue-600" ? "bg-blue-300" : getScoreColor(exercise.score, exercise.maxScore) === "text-yellow-600" ? "bg-yellow-300" : "bg-red-300"}`}
                        ></div>
                        <span className="truncate">{exercise.title}</span>
                      </div>
                      <span>
                        {exercise.score}/{exercise.maxScore}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Student Information */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <User className="h-5 w-5" />
                Student Information
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <User className="h-4 w-4 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Student Name</p>
                    <p className="font-medium">{data.student.name}</p>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <Mail className="h-4 w-4 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Email</p>
                    <p className="font-medium">{data.student.email}</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                Submission Details
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <FileText className="h-4 w-4 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Submission ID</p>
                    <p className="font-medium">{data.student.submissionId}</p>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <Calendar className="h-4 w-4 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Submission Date</p>
                    <p className="font-medium">{data.student.submissionDate}</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Code className="h-5 w-5" />
                Session Information
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <FileText className="h-4 w-4 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Course</p>
                    <p className="font-medium">
                      {data.session.courseCode}: {data.session.title}
                    </p>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <User className="h-4 w-4 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Instructor</p>
                    <p className="font-medium">{data.session.instructor}</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Overall Feedback */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <MessageSquare className="h-5 w-5" />
              Overall Feedback
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 mb-4">{data.feedback.overallComment}</p>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
              <div>
                <h3 className="text-sm font-medium flex items-center gap-2 mb-2">
                  <Star className="h-4 w-4 text-yellow-500" />
                  Strengths
                </h3>
                <ul className="list-disc list-inside space-y-1 text-gray-700">
                  {data.feedback.strengths.map((strength, index) => (
                    <li key={index}>{strength}</li>
                  ))}
                </ul>
              </div>

              <div>
                <h3 className="text-sm font-medium flex items-center gap-2 mb-2">
                  <Lightbulb className="h-4 w-4 text-blue-500" />
                  Areas for Improvement
                </h3>
                <ul className="list-disc list-inside space-y-1 text-gray-700">
                  {data.feedback.areasForImprovement.map((area, index) => (
                    <li key={index}>{area}</li>
                  ))}
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Exercise Selection */}
        <div className="mb-6">
          <h2 className="text-lg font-semibold mb-3">Exercise Details</h2>
          <div className="flex flex-wrap gap-2">
            {data.exercises.map((exercise) => (
              <Button
                key={exercise.id}
                variant={selectedExerciseId === exercise.id ? "default" : "outline"}
                onClick={() => setSelectedExerciseId(exercise.id)}
                className="flex items-center gap-2"
              >
                <div
                  className={`h-2 w-2 rounded-full ${getScoreColor(exercise.score, exercise.maxScore) === "text-green-600" ? "bg-green-400" : getScoreColor(exercise.score, exercise.maxScore) === "text-blue-600" ? "bg-blue-400" : getScoreColor(exercise.score, exercise.maxScore) === "text-yellow-600" ? "bg-yellow-400" : "bg-red-400"}`}
                ></div>
                {exercise.title}
                <Badge variant="secondary" className="ml-1">
                  {exercise.score}/{exercise.maxScore}
                </Badge>
              </Button>
            ))}
          </div>
        </div>

        {/* Selected Exercise Details */}
        {selectedExercise && (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle>{selectedExercise.title}</CardTitle>
                    <CardDescription>Weight: {selectedExercise.weight}% of total grade</CardDescription>
                  </div>
                  <div className="text-right">
                    <div
                      className={`text-2xl font-bold ${getScoreColor(selectedExercise.score, selectedExercise.maxScore)}`}
                    >
                      {selectedExercise.score}/{selectedExercise.maxScore}
                    </div>
                    <p className="text-sm text-gray-500">
                      {Math.round((selectedExercise.score / selectedExercise.maxScore) * 100)}% Score
                    </p>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <p className="text-gray-700 mb-4">{selectedExercise.description}</p>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                  <Card className="bg-gray-50 border">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <CheckCircle className="h-5 w-5 text-green-500" />
                          <h3 className="font-medium">Pass Rate</h3>
                        </div>
                        <span className="font-bold">{Math.round(calculatePassRate(selectedExercise.testCases))}%</span>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="bg-gray-50 border">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <Clock className="h-5 w-5 text-blue-500" />
                          <h3 className="font-medium">Test Cases</h3>
                        </div>
                        <span className="font-bold">{selectedExercise.testCases.length}</span>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="bg-gray-50 border">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <Award className="h-5 w-5 text-yellow-500" />
                          <h3 className="font-medium">Grade Impact</h3>
                        </div>
                        <span className="font-bold">{selectedExercise.weight}%</span>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                <Tabs defaultValue="test-cases" className="w-full">
                  <TabsList className="mb-4">
                    <TabsTrigger value="test-cases">Test Cases</TabsTrigger>
                    <TabsTrigger value="feedback">Feedback</TabsTrigger>
                  </TabsList>

                  <TabsContent value="test-cases">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Test Case</TableHead>
                          <TableHead>Input</TableHead>
                          <TableHead>Expected Output</TableHead>
                          <TableHead>Actual Output</TableHead>
                          <TableHead>Status</TableHead>
                          <TableHead className="text-right">Score</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {selectedExercise.testCases.map((testCase) => (
                          <TableRow key={testCase.id}>
                            <TableCell className="font-medium">{testCase.name}</TableCell>
                            <TableCell className="font-mono text-xs">{testCase.input}</TableCell>
                            <TableCell className="font-mono text-xs">{testCase.expectedOutput}</TableCell>
                            <TableCell className="font-mono text-xs">{testCase.actualOutput}</TableCell>
                            <TableCell>
                              <Badge className={getStatusColor(testCase.status)}>
                                <div className="flex items-center gap-1">
                                  {getStatusIcon(testCase.status)}
                                  {testCase.status}
                                </div>
                              </Badge>
                            </TableCell>
                            <TableCell className="text-right font-medium">
                              <span className={getScoreColor(testCase.score, testCase.maxScore)}>
                                {testCase.score}/{testCase.maxScore}
                              </span>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TabsContent>

                  <TabsContent value="feedback">
                    <div className="space-y-6">
                      <div>
                        <h3 className="text-sm font-medium flex items-center gap-2 mb-2">
                          <MessageSquare className="h-4 w-4 text-gray-500" />
                          Auto-Generated Feedback
                        </h3>
                        <p className="text-gray-700 bg-gray-50 p-4 rounded-md border">
                          {selectedExercise.feedback.autoGenerated}
                        </p>
                      </div>

                      <div>
                        <h3 className="text-sm font-medium flex items-center gap-2 mb-2">
                          <User className="h-4 w-4 text-gray-500" />
                          Tutor's Feedback
                        </h3>
                        <p className="text-gray-700 bg-gray-50 p-4 rounded-md border">
                          {selectedExercise.feedback.tutorFeedback}
                        </p>
                      </div>

                      <div>
                        <h3 className="text-sm font-medium flex items-center gap-2 mb-2">
                          <Lightbulb className="h-4 w-4 text-gray-500" />
                          Improvement Suggestions
                        </h3>
                        <ul className="list-disc list-inside space-y-1 text-gray-700 bg-gray-50 p-4 rounded-md border">
                          {selectedExercise.feedback.improvements.map((improvement, index) => (
                            <li key={index}>{improvement}</li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Contact & Support */}
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>Contact & Support</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 mb-4">
              For questions about this feedback, please contact support@codelab.edu or visit your tutor during office
              hours: Mon-Wed 10:00-12:00.
            </p>
            <Separator className="my-4" />
            <p className="text-xs text-gray-500">
              <strong>Disclaimer:</strong> This feedback report is generated based on automated testing and tutor
              review. Scores and comments are subject to final review by the course instructor.
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
