services:

  redis:
    image: redis:8.2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  server:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    entrypoint: ["/bin/bash", "-c", "./entrypoints/sandbox.sh"]
    runtime: sysbox-runc
    shm_size: '2gb'
    build:
      context: .
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      prestart:
        condition: service_completed_successfully
    volumes: &common_volumes
      - ./src:/codelab/src
      - ./database:/codelab/database
      - ./logs:/codelab/logs
      - ./sandbox_filesystem:/codelab/sandbox_filesystem
      - ./supervisord:/codelab/supervisord
    env_file:
      - .env
    environment: &common_env
      - SQLITE_DATABASE_PATH=${SQLITE_DATABASE_PATH}
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - SENTRY_DSN=${SENTRY_DSN}
      - WORKER_BROKER_URL=${WORKER_BROKER_URL}
      - WORKER_RESULT_BACKEND=${WORKER_RESULT_BACKEND}
      - EXTERNAL_API_KEY=${EXTERNAL_API_KEY}

    healthcheck:
      test: "curl -s -f http://localhost:8000/api/v1/health-check/ | get -n 1 | grep 200"
      interval: 30s
      timeout: 5s
      retries: 5

  prestart:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: .
    command: bash ./entrypoints/prestart.sh
    depends_on:
      redis:
        condition: service_healthy
    volumes: *common_volumes
    environment: *common_env
    env_file:
      - .env
