# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ContributionStats {
  contributor: String!
  contributions: Int!
}

type Contributions {
  contributors: [String!]!
  contributionStats: [ContributionStats!]!
}

type Project {
  id: Int!
  sessionId: String!
  name: String!
  yDocUpdates: String!
  createdAt: DateTime!
  createdBy: String!
  members: [String!]!
  contributions: Contributions!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Directory {
  id: String!
  path: String!
  parentId: String
  createdAt: DateTime!
  lastModified: DateTime!
}

type File {
  id: String!
  path: String!
  content: String!
  parentId: String

  """File size in bytes"""
  size: Int
  createdAt: DateTime!
  lastModified: DateTime!
}

type Version {
  id: Int!
  snapshot: String!
  fileId: String!
  createdAt: DateTime!
  committedBy: String!
}

type Query {
  """
  List all files and directories in a project. Returns an empty array if no files or directories are found or if project does not exist.
  """
  listFiles(projectId: Int!): [FileSystemEntry!]!

  """
  Get all versions of a file by file `id`. Returns an empty array if file with the id does not exist.
  """
  getFileVersions(fileId: String!): [Version!]!

  """Get a file by its id."""
  getFile(fileId: String!): File

  """
  Find a project by its `id`. If `null` is returned, then the project could not be found.
  """
  getProject(id: Int!): Project

  """
  Find a project by its `sessionId`. If `null` is returned, then the project could not be found.
  """
  getProjectBySessionId(sessionId: String!): Project
}

"""A union of File and Directory types."""
union FileSystemEntry = File | Directory

type Mutation {
  """Create a new file. Returns the new file"""
  newFile(projectId: Int!, filePath: String!, initialContent: String): File!

  """
  Update a file's content and create a version for the file. Returns the file.
  """
  updateFile(
    fileId: String!
    newContent: String!
    projectId: Int!

    """Yjs document updates in base64 format"""
    yDocUpdates: String!

    """Yjs snapshot in base64 format"""
    snapshot: String!
  ): File!

  """Update a file's name. Returns the file."""
  renameFile(fileId: String!, newName: String!): File!

  """Delete a file by its id."""
  deleteFile(fileId: String!): File!
  getOrCreateDirectory(projectId: Int!, path: String!): Directory!
  deleteDirectory(id: String!): Directory!
  renameDirectory(id: String!, newName: String!): Directory!

  """Create a new project."""
  createProject(
    sessionId: String!
    name: String!

    """List of users to add to the project. The creator id may not be added."""
    members: [String!]
  ): Project!
  updateProject(
    """
    The ID of the project to update. Must be present if `sessionId` is not.
    """
    id: Int

    """
    The session ID of the project to update. Must be present if `id` is not.
    """
    sessionId: String
    name: String!
  ): Boolean!
  addProjectMember(projectId: Int!, user: String!): Boolean!
  removeProjectMember(projectId: Int!, user: String!): Boolean!
  updateProjectDoc(
    projectId: Int!

    """A base64 encoded string of the project yjs document."""
    doc: String!
  ): Boolean!
}